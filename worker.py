import re
import asyncio
import os
import logging
import traceback
import contextlib
import sys
import html
from datetime import datetime

from telethon import TelegramClient, events
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command

from dotenv import load_dotenv
import pymysql
from pymysql import Error as PyMysqlError

from telethon.sessions import StringSession
load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

api_id = int(os.getenv("TG_API_ID"))
api_hash = os.getenv("TG_API_HASH")
bot_token = os.getenv("BOT_TOKEN")

ALLOWED_START_IDS = set(
    int(x.strip()) for x in os.getenv("ALLOWED_START_IDS").split(",") if x.strip()
)

bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

target_chat_id = int(os.getenv("OWNER_CHAT_ID"))
_owner_d = os.getenv("OWNER_CHAT_ID_D")
_owner_n = os.getenv("OWNER_CHAT_ID_N")
target_chat_id_D = int(_owner_d) if (_owner_d and _owner_d.isdigit()) else target_chat_id
target_chat_id_N = int(_owner_n) if (_owner_n and _owner_n.isdigit()) else target_chat_id

session_str = os.getenv("TG_SESSION")
if not session_str:
    raise RuntimeError("–ù–µ—Ç TG_SESSION. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ StringSession –∏ –ø–æ–ª–æ–∂–∏—Ç–µ –≤ .env")
client = TelegramClient(StringSession(session_str), api_id, api_hash)

# –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–æ —Å—á–µ—Ç–∞"
parsed_data = []

# –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–≤–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è "–ù–∞–∑–∞–¥"
last_summary_text = ""



# ---------- –†–∞–±–æ—Ç–∞ —Å –ë–î ----------
def _db_params():
    return {
        "user": os.getenv("DB_USER"),
        "password": os.getenv("DB_PASS"),
        "host": os.getenv("DB_HOST"),
        "port": int(os.getenv("DB_PORT", 3366) or 3366),
        "database": os.getenv("DB_NAME"),
        "charset": 'utf8mb4',
    }


async def obrabotchik():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –ø–æ –∫–∞—Å—Å–∞–º. –ë–µ–∑–æ–ø–∞—Å–Ω–æ: –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≤–µ—Ä–Ω—ë—Ç 0.0"""
    logging.debug("–ó–∞–ø—É—Å–∫ obrabotchik()")
    params = _db_params()
    conn = None
    try:
        if any(v in (None, "") for v in params.values()):
            logging.error("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –Ω–µ–ø–æ–ª–Ω—ã–µ")
            return 0.0

        conn = pymysql.connect(**params, cursorclass=pymysql.cursors.DictCursor)
        logging.debug("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")

        with conn.cursor() as cur:
            logging.debug("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å—É–º–º—ã –∫–∞—Å—Å—ã")
            cur.execute(
                """
                SELECT SUM(afoc.balance) AS total_balance
                FROM algon_finance_online_cashbox afoc 
                WHERE afoc.type <> "disabled"
                """
            )
            row = cur.fetchone() or {}
            kassa = row.get("total_balance")
            return float(kassa or 0.0)
    except PyMysqlError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î: {e}")
        logging.error(traceback.format_exc())
        return 0.0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ obrabotchik(): {e}")
        logging.error(traceback.format_exc())
        return 0.0
    finally:
        with contextlib.suppress(Exception):
            if conn:
                conn.close()


# ---------- –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ----------
def parse_financial_message(text):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞: ^–ù–∞–∑–≤–∞–Ω–∏–µ$12345.67$ –∏ —Å—É–º–º–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"""
    global parsed_data
    logging.debug("–ó–∞–ø—É—Å–∫ parse_financial_message()")
    logging.debug(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {text[:500]}")
    parsed_data = []
    total = 0.0
    pattern = re.compile(r"^\^(.+?)\$(\-?[\d\s.,]+)\$", re.MULTILINE)

    for match in pattern.finditer(text):
        name = match.group(1).strip()
        value = float(match.group(2).replace("\xa0", "").replace(" ", "").replace(",", "."))
        parsed_data.append((name, value))
        total += value

    parsed_data.sort(key=lambda x: x[1], reverse=True)
    logging.debug(f"–°–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {parsed_data}")
    logging.debug(f"–û–±—â–∞—è —Å—É–º–º–∞: {total}")
    return total


# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
@client.on(events.NewMessage)
async def handler(event):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    global last_summary_text
    text = event.text
    logging.debug(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {text[:500] if text else ''}")
    if not text or "^" not in text or "$" not in text:
        return

    try:
        total = parse_financial_message(text)
        total_str = f"{total:,.2f}".replace(",", " ").replace(".", ",")

        now = datetime.now().strftime("%d.%m.%Y")
        kassa = await obrabotchik()
        kassa_str = f"{kassa:,.2f}".replace(",", " ").replace(".", ",")
        itog_sum = total + kassa
        itog_str = f"{itog_sum:,.2f}".replace(",", " ").replace(".", ",")

        last_summary_text = (
            f"<b>\U0001F4C5 –ë–∞–ª–∞–Ω—Å –≠–∫–æ—Å–º–æ—Ç—Ä –Ω–∞ {now}</b>\n\n"
            f"\U0001F4B3 <b>1. –†/—Å:</b> {total_str} ‚ÇΩ\n"
            f"\U0001F3E6 <b>2. –ö–∞—Å—Å—ã –î—Ä–∞–π–≤:</b> {kassa_str} ‚ÇΩ\n\n"
            f"\U0001F9FE <b>–ò—Ç–æ–≥–æ:</b> {itog_str} ‚ÇΩ"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="\U0001F4CB –ü–æ–¥—Ä–æ–±–Ω–æ –∫–∞—Å—Å—ã", callback_data="show_details")],
            [InlineKeyboardButton(text="\U0001F4E8 –ü–æ–¥—Ä–æ–±–Ω–æ —Å—á–µ—Ç–∞", callback_data="show_raw")]
        ])

        logging.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–æ—Å–Ω–æ–≤–Ω–æ–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç)")
        await bot.send_message(chat_id=target_chat_id, text=last_summary_text, reply_markup=keyboard)
        if target_chat_id_D != target_chat_id:
            await bot.send_message(chat_id=target_chat_id_D, text=last_summary_text, reply_markup=keyboard)

        if target_chat_id_N != target_chat_id:
            await bot.send_message(chat_id=target_chat_id_N, text=last_summary_text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handler: {e}")
        logging.error(traceback.format_exc())
        with contextlib.suppress(Exception):
            await bot.send_message(chat_id=target_chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")


@dp.callback_query(lambda c: c.data == "show_details")
async def handle_callback(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞: –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∫–∞—Å—Å–∞–º (–±–µ—Ä—ë–º –∏–∑ –ë–î –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∫–µ—à–∞)."""
    logging.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: show_details")
    conn = None
    try:
        params = _db_params()
        if any(v in (None, "") for v in params.values()):
            await callback.answer("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", show_alert=True)
            return

        conn = pymysql.connect(**params, cursorclass=pymysql.cursors.DictCursor)
        with conn.cursor() as cur:
            cur.execute(
                """
                SELECT o.name, SUM(afoc.balance) as Kassa
                FROM algon_finance_online_cashbox afoc 
                INNER JOIN oto o ON o.id = afoc.oto_id 
                WHERE afoc.`type` <> "disabled" AND afoc.balance <> 0 AND afoc.oto_id IS NOT NULL
                GROUP BY o.name
                ORDER BY Kassa DESC
                """
            )
            rows_1 = cur.fetchall()

            cur.execute(
                """
                SELECT afoc.name, afoc.balance as Kassa
                FROM algon_finance_online_cashbox afoc
                WHERE (afoc.`type` = "reg" OR afoc.`type` = "manage_company") AND afoc.balance <> 0 
                ORDER BY Kassa DESC
                """
            )
            rows_2 = cur.fetchall()

        if not rows_1 and not rows_2:
            await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
            return

        lines = []
        for row in rows_1 + rows_2:
            name = (row.get("name") or "").strip()
            balance = float(row.get("Kassa") or 0.0)
            balance_str = f"{balance:,.2f}".replace(",", " ").replace(".", ",")
            bullet = "‚ñ™Ô∏è" if row in rows_1 else "‚ñ´Ô∏è"
            lines.append(f"{bullet} {name}\n{balance_str} ‚ÇΩ\n")

        message = "\n".join(lines) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        )

        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except TelegramBadRequest as e:
        logging.warning(f"TelegramBadRequest: {e}")
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ, –∏ —è –ø–æ–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        logging.error(traceback.format_exc())
        with contextlib.suppress(Exception):
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
    finally:
        with contextlib.suppress(Exception):
            if conn:
                conn.close()


@dp.callback_query(lambda c: c.data == "show_raw")
async def handle_show_raw(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞: –ø–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ —Å—á–µ—Ç–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–µ—à).
    –ï—Å–ª–∏ –∫–µ—à–∞ –Ω–µ—Ç (–ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏" –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    """
    logging.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: show_raw")
    global parsed_data
    try:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        )

        if not parsed_data:
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            return

        lines = []
        for name, value in parsed_data:
            value_str = f"{value:,.2f}".replace(",", " ").replace(".", ",")
            lines.append(f"‚ñ´Ô∏è {html.escape(name)}\n{value_str} ‚ÇΩ\n")

        message = "\n".join(lines) or "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏"
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except TelegramBadRequest as e:
        logging.warning(f"TelegramBadRequest: {e}")
        try:
            await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        except Exception:
            pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_show_raw: {e}")
        logging.error(traceback.format_exc())
        with contextlib.suppress(Exception):
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@dp.callback_query(lambda c: c.data == "back_to_main")
async def handle_back(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞: –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é. –ï—Å–ª–∏ —Å–≤–æ–¥–∫–∏ –Ω–µ—Ç (–ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º '–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏' –≤–º–µ—Å—Ç–æ –∞–ª–µ—Ä—Ç–∞."""
    logging.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: back_to_main")
    global last_summary_text
    try:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="\U0001F4CB –ü–æ–¥—Ä–æ–±–Ω–æ –∫–∞—Å—Å—ã", callback_data="show_details")],
                [InlineKeyboardButton(text="\U0001F4E8 –ü–æ–¥—Ä–æ–±–Ω–æ —Å—á–µ—Ç–∞", callback_data="show_raw")]
            ]
        )

        text = last_summary_text if last_summary_text else "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏"
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except TelegramBadRequest as e:
        logging.warning(f"TelegramBadRequest: {e}")
        with contextlib.suppress(Exception):
            await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_back: {e}")
        logging.error(traceback.format_exc())
        with contextlib.suppress(Exception):
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

def _format_taxes_table(rows):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö '—Å—Ç—Ä–∞–Ω–∏—Ü' —Å —Ç–∞–±–ª–∏—Ü–µ–π –≤ <pre>, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å ~3500-3800 —Å–∏–º–≤–æ–ª–æ–≤.
    –ö–æ–ª–æ–Ω–∫–∏: –†–µ–≥–∏–æ–Ω | –ö–æ–ª-–≤–æ –ø–æ—à–ª–∏–Ω
    """
    if not rows:
        return ["–î–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]

    headers = ["–†–µ–≥–∏–æ–Ω", "–ö–æ–ª-–≤–æ –ø–æ—à–ª–∏–Ω"]

    str_rows = []
    col_widths = [len(h) for h in headers]
    for r in rows:
        region = str(r.get("–†–µ–≥–∏–æ–Ω", "") or "")
        cnt    = str(r.get("–ö–æ–ª-–≤–æ –ø–æ—à–ª–∏–Ω", "") or "")

        row = [region, cnt]
        str_rows.append(row)
        for i, cell in enumerate(row):
            col_widths[i] = max(col_widths[i], len(cell))

    def fmt_row(cells):
        return "  ".join(cell.ljust(col_widths[i]) for i, cell in enumerate(cells))

    header_line = fmt_row(headers)
    sep_line = "-" * len(header_line)

    pages = []
    current = ["<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥–æ—Å.–ø–æ—à–ª–∏–Ω—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º</b>", "<pre>", header_line, sep_line]
    current_len = sum(len(x) for x in current) + 50  # –∑–∞–ø–∞—Å –Ω–∞ —Ç–µ–≥–∏

    for row in str_rows:
        line = fmt_row(row)
        if current_len + len(line) + 7 > 3500:
            current.append("</pre>")
            pages.append("\n".join(current))
            current = ["<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥–æ—Å.–ø–æ—à–ª–∏–Ω—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)</b>", "<pre>", header_line, sep_line]
            current_len = sum(len(x) for x in current) + 50

        current.append(line)
        current_len += len(line) + 1

    current.append("</pre>")
    pages.append("\n".join(current))
    return pages

@dp.message(Command("start"))
async def cmd_start(message):
    try:
        user_id = int(message.from_user.id)
    except Exception:
        user_id = None

    if user_id not in ALLOWED_START_IDS:
        return

    text = (
        '–ü—Ä–∏–≤–µ—Ç! –ü–æ –∫–Ω–æ–ø–∫–µ "<b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—à–ª–∏–Ω—ã</b>" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ '
        '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å –ø–æ—à–ª–∏–Ω –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º!'
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—à–ª–∏–Ω—ã", callback_data="check_taxes")]
    ])

    await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "check_taxes")
async def handle_check_taxes(callback: CallbackQuery):
    conn = None
    try:
        params = _db_params()
        if any(v in (None, "") for v in params.values()):
            await callback.answer("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.", show_alert=True)
            return

        conn = pymysql.connect(**params, cursorclass=pymysql.cursors.DictCursor)
        with conn.cursor() as cur:
            cur.execute("""
                SELECT
                    wurl.name as '–†–µ–≥–∏–æ–Ω',
                    COUNT(t.upno) as '–ö–æ–ª-–≤–æ –ø–æ—à–ª–∏–Ω'
                FROM tax t
                INNER JOIN webto_user_region_list wurl on wurl.id = t.region_id 
                WHERE t.active = 1
                GROUP BY t.region_id, t.`type`, t.price
                ORDER BY COUNT(t.upno) DESC
            """)
            rows = cur.fetchall()

        pages = _format_taxes_table(rows)

        if len(pages) == 1:
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=pages[0],
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_taxes")]
                ]),
                parse_mode="HTML"
            )
        else:
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=pages[0],
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_taxes")]
                ]),
                parse_mode="HTML"
            )
            for p in pages[1:]:
                await bot.send_message(chat_id=callback.message.chat.id, text=p, parse_mode="HTML")

        await callback.answer()
    except TelegramBadRequest as e:
        logging.warning(f"TelegramBadRequest: {e}")
        try:
            await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ù–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—à–ª–∏–Ω—ã¬ª.", show_alert=True)
        except Exception:
            pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_check_taxes: {e}")
        logging.error(traceback.format_exc())
        with contextlib.suppress(Exception):
            await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
    finally:
        with contextlib.suppress(Exception):
            if conn:
                conn.close()


@dp.error()
async def on_error(update, error):
    logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {error}\nUpdate: {update}")


async def main():
    logging.debug("–ó–∞–ø—É—Å–∫ main()")
    while True:
        try:
            await client.start()
            await asyncio.gather(
                dp.start_polling(bot, allowed_updates=["message", "callback_query"]),
                client.run_until_disconnected()
            )
        except Exception as e:
            logging.error(f"–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —É–ø–∞–ª: {e}")
            logging.error(traceback.format_exc())
            await asyncio.sleep(3)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
